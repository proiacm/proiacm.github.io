{"version":3,"sources":["About/About.js","Contact/Contact.js","Projects/Projects.js","Nav/Nav.js","App.js","serviceWorker.js","index.js"],"names":["About","props","className","src","loopText","Contact","target","href","Projects","name","desc","link","gif","Nav","animatedText","App","state","projects","projectList","this","map","project","index","key","steps","loop","Infinity","wrapper","interval","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mXAqBeA,G,YAlBD,SAACC,GACX,OACQ,yBAAKC,UAAU,SACX,yBAAKA,UAAU,YAAYC,IAAI,oCAC3B,yBAAKD,UAAU,cAAf,0HAGwD,6BAHxD,IAG8D,6BAH9D,kGAK2B,6BAL3B,uFAKoH,6BALpH,IAK0H,6BACtH,iGAA8E,6BANlF,IAMwF,6BANxF,uEAOwE,6BAPxE,IAO8E,6BAC3E,sCAAYD,EAAMG,SAAlB,SCDRC,G,MAXC,WACZ,OACI,yBAAKH,UAAU,eACX,yBAAKA,UAAU,WACX,uCAAgB,6BAClB,4BAAI,uBAAGI,OAAO,SAASC,KAAK,wCAAxB,+BAAJ,MAAqG,uBAAGD,OAAO,SAASC,KAAK,8BAAxB,yBAArG,MAAsL,uBAAGD,OAAO,SAASC,KAAK,0BAAxB,4BAAtL,MAAsQ,uBAAGD,OAAO,SAASC,KAAM,4BAAzB,yBCUrQC,G,MAfE,SAACP,GAEd,OACI,yBAAKC,UAAU,gBACX,4BAAI,2BAAID,EAAMQ,OACd,2BAAIR,EAAMS,MACV,yBAAKR,UAAU,WACX,uBAAGI,OAAO,SAASC,KAAMN,EAAMU,MAC3B,yBAAKT,UAAU,cAAcC,IAAKF,EAAMW,WCE7CC,G,MAVH,SAACZ,GACT,OACI,yBAAKC,UAAU,WACX,yBAAKA,UAAU,OACVD,EAAMa,iB,gBC2CRC,E,4MAtCbC,MAAQ,CACNC,SAAU,CACT,CAAER,KAAM,WAAYE,KAAM,sCAAuCC,IAAI,6DAA8DF,KAAM,4BACzI,CAAED,KAAM,UAAWE,KAAK,qDAAsDC,IAAK,6DAA8DF,KAAM,qCACvJ,CAAED,KAAM,cAAeE,KAAM,yCAA0CC,IAAI,6DAA8DF,KAAM,iC,uDAMhJ,IAAIQ,EAAc,6BACfC,KAAKH,MAAMC,SAASG,KAAI,SAACC,EAASC,GACjC,OAAO,kBAAC,EAAD,CAAUC,IAAKD,EAAOb,KAAMY,EAAQZ,KAAME,KAAMU,EAAQV,KAAMC,IAAKS,EAAQT,IAAKF,KAAMW,EAAQX,WAIzG,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,CAAKY,aAAc,kBAAC,IAAD,CAASU,MAAO,CAAC,wBAA0B,IAAM,gCAAkC,KACtGC,KAAMC,IACNC,QAAQ,SACR,kBAAC,EAAD,CAAOvB,SAAU,kBAAC,IAAD,CAAUwB,SAAU,KACzB,2DACA,kDACA,8CACA,+CACA,8CACA,sDACA,8CAXd,IAY8B,6BAChB,wCACXV,EACD,kBAAC,EAAD,W,GAnCUW,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3a579f52.chunk.js","sourcesContent":["import React from 'react';\nimport './About.css'\n\nconst About = (props) => {\n    return (\n            <div className='About'>  \n                <img className='About-img' src='https://i.imgur.com/oOhU8xs.jpg'></img>\n                    <div className='About-text'>\n\n                        I leverage empathy and experience in building client relationships\n                        while designing functional, aesthetic applications. <br/> <br/>\n                        As a full-stack developer, I have worked on multiple projects on my own \n                        and as part of a team, <br/> with a focus on object-oriented programming, MVC architecture, and responsive SPAs.<br/> <br/>\n                        <strong>Technical skills: React, JavaScript, Ruby on Rails, CSS, SQL </strong><br/> <br/>\n                        I'm always learning and am currently open to work or collaboration! <br/> <br/> \n                       <h3> Let's {props.loopText} </h3>\n                    </div>\n            </div>\n    )\n}\n\nexport default About; ","import React from 'react';\nimport './Contact.css';\n\nconst Contact = () => {\n    return (\n        <div className='Contact-img'>\n            <div className='Contact'>\n                <h1>Contact</h1><br/>\n              <h4><a target='_blank' href='https://www.linkedin.com/in/cmproia/'> Let's connect via LinkedIn</a> | <a target='_blank' href='https://github.com/proiacm'>Collaborate on GitHub</a> | <a target='_blank' href='https://dev.to/proiacm'>Check out my blog on DEV</a> | <a target='_blank' href={\"mailto:\" + 'proiacm@gmail.com'}>Send me an email</a></h4>\n            </div>\n        </div>\n    )\n}\n\nexport default Contact;\n\n","import React from 'react';\nimport './Projects.css'\n\nconst Projects = (props) => {\n    \n    return (\n        <div className='Project-card'>\n            <h2><u>{props.name}</u></h2>\n            <p>{props.desc}</p>\n            <div className='Project'>\n                <a target='_blank' href={props.link}>\n                    <img className='Project-img' src={props.gif}/>\n                </a>\n            </div>\n        </div>\n    )\n}\n\nexport default Projects;","import React from 'react';\nimport './Nav.css';\n\nconst Nav = (props) => {\n    return (\n        <div className='Nav-img'>\n            <div className='Nav'>\n                {props.animatedText}\n            </div>\n        </div>\n    )\n}\n\nexport default Nav; \n\n","import React, { Component } from 'react';\nimport './App.css';\nimport About from './About/About';\nimport Contact from './Contact/Contact';\nimport Projects from './Projects/Projects';\nimport Nav from './Nav/Nav';\nimport Typical from 'react-typical'\nimport TextLoop from 'react-text-loop';\n\nclass App extends Component {\n\n\n  state = { \n    projects: [\n     { name: 'Traveler', link: 'https://github.com/proiacm/traveler', gif:'https://media.giphy.com/media/hgg0zI4EhUAg3QgYAl/giphy.gif', desc: 'JavaScript trip tracker.'},\n     { name: 'Glamlex', link:'https://github.com/proiacm/glamlex_sinatra_project', gif: 'https://media.giphy.com/media/UpnkiPR6CAq7HqtI87/giphy.gif', desc: 'Ruby/Sinatra appointment manager.'},\n     { name: 'Untriggered', link: 'https://github.com/proiacm/untriggered', gif:'https://media.giphy.com/media/PGNdCyJiw2vtilMvIO/giphy.gif', desc: 'Ruby on Rails mood journal.'}\n   ]\n }\n\n  render() {\n\n    let projectList = <div>\n      {this.state.projects.map((project, index) => {\n        return <Projects key={index} name={project.name} link={project.link} gif={project.gif} desc={project.desc} />\n      })}\n    </div>\n\n    return (\n      <div className=\"App\">\n        <Nav animatedText={<Typical steps={['Hi, I\\'m CiaraMaria...', 1000, 'and I\\'m a software developer!', 500]}\n        loop={Infinity}\n        wrapper=\"h1\"/>}/>\n        <About loopText={<TextLoop interval={2000}>\n                    <span>build something together.</span>\n                    <span>solve a problem.</span>\n                    <span>grab coffee.</span>\n                    <span>pair program.</span>\n                    <span>share memes.</span>\n                    <span>learn something new.</span>\n                    <span>innovate.</span>\n                    </TextLoop>} /> <br/>\n                    <h1>Projects</h1>\n        {projectList}\n        <Contact />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}